고차함수 지원

new Calculable(){
@Override
puvlid void claculate(intx, inty){System.out.println(x + y)}
}

public void action(Calculablie cal){
int x = 10;
int y = 20;
cal.claculate(x,y);
}

action(
(x , y) -> int result = x + y;
sout(result);
)

//인터페이스의 익명구현 객체를 함다식으로 표현하여면 인터페이스가 단 하나의 추상메소드만 가져야 한다.
인터페이스가 단 하나의 추상메소드를 가질 때, 함수형 인터페이스라고 한다.

public interface Runnable{
void run();
}


람다식
메소드 참조 : 매소드를 참조해서 매개변수의 정보와 리턴타입을 알아내겠다.
            람다식에서 불필요한 매개변수를 제거하는 것을 목적으로 한다.

            (x,y) -> Math.max(x,y)
            Math::max;

정적 메소드와 인스턴스 메소드 참조
정적 메소드 참조시 => :: 기호를 붗이고 정적 메소드 이름을 기술한다.
참조메소드 참조시 => 인스턴스명 :: 인스턴스 메소드명


매개변수의 메소드 참조
(a,b) -> {a.instanceMethode(b)}
쿨래스 :: instanceMethode

*** 생성자 참조
생성자를 참조한다는 의미는 객체를 생성한다 와 같은 의미

(a,b) -> return new 클래스(a,b);

클래스 :: new